// <auto-generated/>
#pragma warning disable
using AcceptanceFinancial.Models;
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertAbandonedOperation156172666
    public class UpsertAbandonedOperation156172666 : Marten.Internal.Operations.StorageOperation<AcceptanceFinancial.Models.Abandoned, string>
    {
        private readonly AcceptanceFinancial.Models.Abandoned _document;
        private readonly string _id;
        private readonly System.Collections.Generic.Dictionary<string, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertAbandonedOperation156172666(AcceptanceFinancial.Models.Abandoned document, string id, System.Collections.Generic.Dictionary<string, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_upsert_abandoned(?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Text;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;

            if (document.Email != null)
            {
                parameters[2].Value = document.Email;
            }

            else
            {
                parameters[2].Value = System.DBNull.Value;
            }

            setVersionParameter(parameters[3]);
        }

    }

    // END: UpsertAbandonedOperation156172666
    
    
    // START: InsertAbandonedOperation156172666
    public class InsertAbandonedOperation156172666 : Marten.Internal.Operations.StorageOperation<AcceptanceFinancial.Models.Abandoned, string>
    {
        private readonly AcceptanceFinancial.Models.Abandoned _document;
        private readonly string _id;
        private readonly System.Collections.Generic.Dictionary<string, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertAbandonedOperation156172666(AcceptanceFinancial.Models.Abandoned document, string id, System.Collections.Generic.Dictionary<string, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_insert_abandoned(?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Text;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;

            if (document.Email != null)
            {
                parameters[2].Value = document.Email;
            }

            else
            {
                parameters[2].Value = System.DBNull.Value;
            }

            setVersionParameter(parameters[3]);
        }

    }

    // END: InsertAbandonedOperation156172666
    
    
    // START: UpdateAbandonedOperation156172666
    public class UpdateAbandonedOperation156172666 : Marten.Internal.Operations.StorageOperation<AcceptanceFinancial.Models.Abandoned, string>
    {
        private readonly AcceptanceFinancial.Models.Abandoned _document;
        private readonly string _id;
        private readonly System.Collections.Generic.Dictionary<string, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateAbandonedOperation156172666(AcceptanceFinancial.Models.Abandoned document, string id, System.Collections.Generic.Dictionary<string, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_update_abandoned(?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
            postprocessUpdate(reader, exceptions);
        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            await postprocessUpdateAsync(reader, exceptions, token);
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Text;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;

            if (document.Email != null)
            {
                parameters[2].Value = document.Email;
            }

            else
            {
                parameters[2].Value = System.DBNull.Value;
            }

            setVersionParameter(parameters[3]);
        }

    }

    // END: UpdateAbandonedOperation156172666
    
    
    // START: QueryOnlyAbandonedSelector156172666
    public class QueryOnlyAbandonedSelector156172666 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<AcceptanceFinancial.Models.Abandoned>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyAbandonedSelector156172666(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public AcceptanceFinancial.Models.Abandoned Resolve(System.Data.Common.DbDataReader reader)
        {

            AcceptanceFinancial.Models.Abandoned document;
            document = _serializer.FromJson<AcceptanceFinancial.Models.Abandoned>(reader, 0);
            return document;
        }


        public async System.Threading.Tasks.Task<AcceptanceFinancial.Models.Abandoned> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            AcceptanceFinancial.Models.Abandoned document;
            document = await _serializer.FromJsonAsync<AcceptanceFinancial.Models.Abandoned>(reader, 0, token).ConfigureAwait(false);
            return document;
        }

    }

    // END: QueryOnlyAbandonedSelector156172666
    
    
    // START: LightweightAbandonedSelector156172666
    public class LightweightAbandonedSelector156172666 : Marten.Internal.CodeGeneration.DocumentSelectorWithVersions<AcceptanceFinancial.Models.Abandoned, string>, Marten.Linq.Selectors.ISelector<AcceptanceFinancial.Models.Abandoned>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightAbandonedSelector156172666(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public AcceptanceFinancial.Models.Abandoned Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<string>(0);

            AcceptanceFinancial.Models.Abandoned document;
            document = _serializer.FromJson<AcceptanceFinancial.Models.Abandoned>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<AcceptanceFinancial.Models.Abandoned> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<string>(0, token);

            AcceptanceFinancial.Models.Abandoned document;
            document = await _serializer.FromJsonAsync<AcceptanceFinancial.Models.Abandoned>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightAbandonedSelector156172666
    
    
    // START: IdentityMapAbandonedSelector156172666
    public class IdentityMapAbandonedSelector156172666 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<AcceptanceFinancial.Models.Abandoned, string>, Marten.Linq.Selectors.ISelector<AcceptanceFinancial.Models.Abandoned>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapAbandonedSelector156172666(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public AcceptanceFinancial.Models.Abandoned Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<string>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            AcceptanceFinancial.Models.Abandoned document;
            document = _serializer.FromJson<AcceptanceFinancial.Models.Abandoned>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<AcceptanceFinancial.Models.Abandoned> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<string>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            AcceptanceFinancial.Models.Abandoned document;
            document = await _serializer.FromJsonAsync<AcceptanceFinancial.Models.Abandoned>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapAbandonedSelector156172666
    
    
    // START: DirtyTrackingAbandonedSelector156172666
    public class DirtyTrackingAbandonedSelector156172666 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<AcceptanceFinancial.Models.Abandoned, string>, Marten.Linq.Selectors.ISelector<AcceptanceFinancial.Models.Abandoned>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingAbandonedSelector156172666(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public AcceptanceFinancial.Models.Abandoned Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<string>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            AcceptanceFinancial.Models.Abandoned document;
            document = _serializer.FromJson<AcceptanceFinancial.Models.Abandoned>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<AcceptanceFinancial.Models.Abandoned> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<string>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            AcceptanceFinancial.Models.Abandoned document;
            document = await _serializer.FromJsonAsync<AcceptanceFinancial.Models.Abandoned>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingAbandonedSelector156172666
    
    
    // START: QueryOnlyAbandonedDocumentStorage156172666
    public class QueryOnlyAbandonedDocumentStorage156172666 : Marten.Internal.Storage.QueryOnlyDocumentStorage<AcceptanceFinancial.Models.Abandoned, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyAbandonedDocumentStorage156172666(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(AcceptanceFinancial.Models.Abandoned document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.Email)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.Email;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateAbandonedOperation156172666
            (
                document, Identity(document),
                session.Versions.ForType<AcceptanceFinancial.Models.Abandoned, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertAbandonedOperation156172666
            (
                document, Identity(document),
                session.Versions.ForType<AcceptanceFinancial.Models.Abandoned, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertAbandonedOperation156172666
            (
                document, Identity(document),
                session.Versions.ForType<AcceptanceFinancial.Models.Abandoned, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(AcceptanceFinancial.Models.Abandoned document)
        {
            return document.Email;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyAbandonedSelector156172666(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(string id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.String[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: QueryOnlyAbandonedDocumentStorage156172666
    
    
    // START: LightweightAbandonedDocumentStorage156172666
    public class LightweightAbandonedDocumentStorage156172666 : Marten.Internal.Storage.LightweightDocumentStorage<AcceptanceFinancial.Models.Abandoned, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightAbandonedDocumentStorage156172666(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(AcceptanceFinancial.Models.Abandoned document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.Email)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.Email;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateAbandonedOperation156172666
            (
                document, Identity(document),
                session.Versions.ForType<AcceptanceFinancial.Models.Abandoned, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertAbandonedOperation156172666
            (
                document, Identity(document),
                session.Versions.ForType<AcceptanceFinancial.Models.Abandoned, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertAbandonedOperation156172666
            (
                document, Identity(document),
                session.Versions.ForType<AcceptanceFinancial.Models.Abandoned, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(AcceptanceFinancial.Models.Abandoned document)
        {
            return document.Email;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightAbandonedSelector156172666(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(string id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.String[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: LightweightAbandonedDocumentStorage156172666
    
    
    // START: IdentityMapAbandonedDocumentStorage156172666
    public class IdentityMapAbandonedDocumentStorage156172666 : Marten.Internal.Storage.IdentityMapDocumentStorage<AcceptanceFinancial.Models.Abandoned, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapAbandonedDocumentStorage156172666(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(AcceptanceFinancial.Models.Abandoned document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.Email)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.Email;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateAbandonedOperation156172666
            (
                document, Identity(document),
                session.Versions.ForType<AcceptanceFinancial.Models.Abandoned, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertAbandonedOperation156172666
            (
                document, Identity(document),
                session.Versions.ForType<AcceptanceFinancial.Models.Abandoned, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertAbandonedOperation156172666
            (
                document, Identity(document),
                session.Versions.ForType<AcceptanceFinancial.Models.Abandoned, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(AcceptanceFinancial.Models.Abandoned document)
        {
            return document.Email;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapAbandonedSelector156172666(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(string id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.String[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: IdentityMapAbandonedDocumentStorage156172666
    
    
    // START: DirtyTrackingAbandonedDocumentStorage156172666
    public class DirtyTrackingAbandonedDocumentStorage156172666 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<AcceptanceFinancial.Models.Abandoned, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingAbandonedDocumentStorage156172666(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(AcceptanceFinancial.Models.Abandoned document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.Email)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.Email;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateAbandonedOperation156172666
            (
                document, Identity(document),
                session.Versions.ForType<AcceptanceFinancial.Models.Abandoned, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertAbandonedOperation156172666
            (
                document, Identity(document),
                session.Versions.ForType<AcceptanceFinancial.Models.Abandoned, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertAbandonedOperation156172666
            (
                document, Identity(document),
                session.Versions.ForType<AcceptanceFinancial.Models.Abandoned, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(AcceptanceFinancial.Models.Abandoned document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(AcceptanceFinancial.Models.Abandoned document)
        {
            return document.Email;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingAbandonedSelector156172666(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(string id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.String[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: DirtyTrackingAbandonedDocumentStorage156172666
    
    
    // START: AbandonedBulkLoader156172666
    public class AbandonedBulkLoader156172666 : Marten.Internal.CodeGeneration.BulkLoader<AcceptanceFinancial.Models.Abandoned, string>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<AcceptanceFinancial.Models.Abandoned, string> _storage;

        public AbandonedBulkLoader156172666(Marten.Internal.Storage.IDocumentStorage<AcceptanceFinancial.Models.Abandoned, string> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY public.mt_doc_abandoned(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_abandoned_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into public.mt_doc_abandoned (\"id\", \"data\", \"mt_version\", \"mt_dotnet_type\", mt_last_modified) (select mt_doc_abandoned_temp.\"id\", mt_doc_abandoned_temp.\"data\", mt_doc_abandoned_temp.\"mt_version\", mt_doc_abandoned_temp.\"mt_dotnet_type\", transaction_timestamp() from mt_doc_abandoned_temp left join public.mt_doc_abandoned on mt_doc_abandoned_temp.id = public.mt_doc_abandoned.id where public.mt_doc_abandoned.id is null)";

        public const string OVERWRITE_SQL = "update public.mt_doc_abandoned target SET data = source.data, mt_version = source.mt_version, mt_dotnet_type = source.mt_dotnet_type, mt_last_modified = transaction_timestamp() FROM mt_doc_abandoned_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_abandoned_temp as select * from public.mt_doc_abandoned limit 0";


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }


        public override void LoadRow(Npgsql.NpgsqlBinaryImporter writer, AcceptanceFinancial.Models.Abandoned document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer)
        {
            writer.Write(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(document.Email, NpgsqlTypes.NpgsqlDbType.Text);
            writer.Write(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb);
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, AcceptanceFinancial.Models.Abandoned document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.Email, NpgsqlTypes.NpgsqlDbType.Text, cancellation);
            await writer.WriteAsync(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }

    }

    // END: AbandonedBulkLoader156172666
    
    
    // START: AbandonedProvider156172666
    public class AbandonedProvider156172666 : Marten.Internal.Storage.DocumentProvider<AcceptanceFinancial.Models.Abandoned>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public AbandonedProvider156172666(Marten.Schema.DocumentMapping mapping) : base(new AbandonedBulkLoader156172666(new QueryOnlyAbandonedDocumentStorage156172666(mapping)), new QueryOnlyAbandonedDocumentStorage156172666(mapping), new LightweightAbandonedDocumentStorage156172666(mapping), new IdentityMapAbandonedDocumentStorage156172666(mapping), new DirtyTrackingAbandonedDocumentStorage156172666(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: AbandonedProvider156172666
    
    
}

